<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="522"><g><title>&lt;byte_assembly::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.38%)</title><rect x="0.0000%" y="469" width="0.3831%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="479.50"></text></g><g><title>core::fmt::Arguments::new_v1 (1 samples, 0.19%)</title><rect x="0.1916%" y="453" width="0.1916%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.4416%" y="463.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.57%)</title><rect x="0.3831%" y="469" width="0.5747%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="3"/><text x="0.6331%" y="479.50"></text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.57%)</title><rect x="0.3831%" y="453" width="0.5747%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="3"/><text x="0.6331%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="0.9579%" y="469" width="0.1916%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="1.2079%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.38%)</title><rect x="1.1494%" y="469" width="0.3831%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="2"/><text x="1.3994%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.38%)</title><rect x="1.5326%" y="469" width="0.3831%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="2"/><text x="1.7826%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.19%)</title><rect x="1.9157%" y="469" width="0.1916%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="1"/><text x="2.1657%" y="479.50"></text></g><g><title>alloc::string::String::push (4 samples, 0.77%)</title><rect x="2.1073%" y="469" width="0.7663%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="4"/><text x="2.3573%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.19%)</title><rect x="2.6820%" y="453" width="0.1916%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="1"/><text x="2.9320%" y="463.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.38%)</title><rect x="2.8736%" y="469" width="0.3831%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="2"/><text x="3.1236%" y="479.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.19%)</title><rect x="3.2567%" y="469" width="0.1916%" height="15" fill="rgb(240,193,28)" fg:x="17" fg:w="1"/><text x="3.5067%" y="479.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.19%)</title><rect x="3.4483%" y="469" width="0.1916%" height="15" fill="rgb(216,20,37)" fg:x="18" fg:w="1"/><text x="3.6983%" y="479.50"></text></g><g><title>core::fmt::Formatter::new (3 samples, 0.57%)</title><rect x="4.0230%" y="453" width="0.5747%" height="15" fill="rgb(206,188,39)" fg:x="21" fg:w="3"/><text x="4.2730%" y="463.50"></text></g><g><title>core::fmt::write (6 samples, 1.15%)</title><rect x="3.6398%" y="469" width="1.1494%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="6"/><text x="3.8898%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.19%)</title><rect x="4.5977%" y="453" width="0.1916%" height="15" fill="rgb(231,73,38)" fg:x="24" fg:w="1"/><text x="4.8477%" y="463.50"></text></g><g><title>malloc (2 samples, 0.38%)</title><rect x="4.7893%" y="469" width="0.3831%" height="15" fill="rgb(225,20,46)" fg:x="25" fg:w="2"/><text x="5.0393%" y="479.50"></text></g><g><title>[[stack]] (28 samples, 5.36%)</title><rect x="0.0000%" y="485" width="5.3640%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="28"/><text x="0.2500%" y="495.50">[[stack..</text></g><g><title>write (1 samples, 0.19%)</title><rect x="5.1724%" y="469" width="0.1916%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="1"/><text x="5.4224%" y="479.50"></text></g><g><title>[byte_assembly] (1 samples, 0.19%)</title><rect x="5.3640%" y="485" width="0.1916%" height="15" fill="rgb(226,26,5)" fg:x="28" fg:w="1"/><text x="5.6140%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.19%)</title><rect x="5.3640%" y="469" width="0.1916%" height="15" fill="rgb(249,33,26)" fg:x="28" fg:w="1"/><text x="5.6140%" y="479.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.19%)</title><rect x="5.3640%" y="453" width="0.1916%" height="15" fill="rgb(235,183,28)" fg:x="28" fg:w="1"/><text x="5.6140%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 1.15%)</title><rect x="5.5556%" y="485" width="1.1494%" height="15" fill="rgb(221,5,38)" fg:x="29" fg:w="6"/><text x="5.8056%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="6.5134%" y="469" width="0.1916%" height="15" fill="rgb(247,18,42)" fg:x="34" fg:w="1"/><text x="6.7634%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="6.5134%" y="453" width="0.1916%" height="15" fill="rgb(241,131,45)" fg:x="34" fg:w="1"/><text x="6.7634%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="6.5134%" y="437" width="0.1916%" height="15" fill="rgb(249,31,29)" fg:x="34" fg:w="1"/><text x="6.7634%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="6.5134%" y="421" width="0.1916%" height="15" fill="rgb(225,111,53)" fg:x="34" fg:w="1"/><text x="6.7634%" y="431.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.19%)</title><rect x="6.5134%" y="405" width="0.1916%" height="15" fill="rgb(238,160,17)" fg:x="34" fg:w="1"/><text x="6.7634%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="6.5134%" y="389" width="0.1916%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="1"/><text x="6.7634%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="6.5134%" y="373" width="0.1916%" height="15" fill="rgb(232,36,49)" fg:x="34" fg:w="1"/><text x="6.7634%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="6.5134%" y="357" width="0.1916%" height="15" fill="rgb(209,103,24)" fg:x="34" fg:w="1"/><text x="6.7634%" y="367.50"></text></g><g><title>&lt;byte_assembly::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.38%)</title><rect x="6.7050%" y="469" width="0.3831%" height="15" fill="rgb(229,88,8)" fg:x="35" fg:w="2"/><text x="6.9550%" y="479.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="7.0881%" y="469" width="0.1916%" height="15" fill="rgb(213,181,19)" fg:x="37" fg:w="1"/><text x="7.3381%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.57%)</title><rect x="7.2797%" y="469" width="0.5747%" height="15" fill="rgb(254,191,54)" fg:x="38" fg:w="3"/><text x="7.5297%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (3 samples, 0.57%)</title><rect x="7.8544%" y="469" width="0.5747%" height="15" fill="rgb(241,83,37)" fg:x="41" fg:w="3"/><text x="8.1044%" y="479.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.57%)</title><rect x="7.8544%" y="453" width="0.5747%" height="15" fill="rgb(233,36,39)" fg:x="41" fg:w="3"/><text x="8.1044%" y="463.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.19%)</title><rect x="8.2375%" y="437" width="0.1916%" height="15" fill="rgb(226,3,54)" fg:x="43" fg:w="1"/><text x="8.4875%" y="447.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="8.2375%" y="421" width="0.1916%" height="15" fill="rgb(245,192,40)" fg:x="43" fg:w="1"/><text x="8.4875%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 1.53%)</title><rect x="8.4291%" y="469" width="1.5326%" height="15" fill="rgb(238,167,29)" fg:x="44" fg:w="8"/><text x="8.6791%" y="479.50"></text></g><g><title>core::cmp::max (5 samples, 0.96%)</title><rect x="9.0038%" y="453" width="0.9579%" height="15" fill="rgb(232,182,51)" fg:x="47" fg:w="5"/><text x="9.2538%" y="463.50"></text></g><g><title>core::cmp::Ord::max (5 samples, 0.96%)</title><rect x="9.0038%" y="437" width="0.9579%" height="15" fill="rgb(231,60,39)" fg:x="47" fg:w="5"/><text x="9.2538%" y="447.50"></text></g><g><title>core::cmp::max_by (5 samples, 0.96%)</title><rect x="9.0038%" y="421" width="0.9579%" height="15" fill="rgb(208,69,12)" fg:x="47" fg:w="5"/><text x="9.2538%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.38%)</title><rect x="9.9617%" y="469" width="0.3831%" height="15" fill="rgb(235,93,37)" fg:x="52" fg:w="2"/><text x="10.2117%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.19%)</title><rect x="10.3448%" y="469" width="0.1916%" height="15" fill="rgb(213,116,39)" fg:x="54" fg:w="1"/><text x="10.5948%" y="479.50"></text></g><g><title>alloc::string::String::push (4 samples, 0.77%)</title><rect x="10.5364%" y="469" width="0.7663%" height="15" fill="rgb(222,207,29)" fg:x="55" fg:w="4"/><text x="10.7864%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.38%)</title><rect x="11.3027%" y="469" width="0.3831%" height="15" fill="rgb(206,96,30)" fg:x="59" fg:w="2"/><text x="11.5527%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="11.6858%" y="469" width="0.1916%" height="15" fill="rgb(218,138,4)" fg:x="61" fg:w="1"/><text x="11.9358%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="11.6858%" y="453" width="0.1916%" height="15" fill="rgb(250,191,14)" fg:x="61" fg:w="1"/><text x="11.9358%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.19%)</title><rect x="11.6858%" y="437" width="0.1916%" height="15" fill="rgb(239,60,40)" fg:x="61" fg:w="1"/><text x="11.9358%" y="447.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="13.2184%" y="421" width="0.1916%" height="15" fill="rgb(206,27,48)" fg:x="69" fg:w="1"/><text x="13.4684%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.19%)</title><rect x="13.4100%" y="421" width="0.1916%" height="15" fill="rgb(225,35,8)" fg:x="70" fg:w="1"/><text x="13.6600%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.19%)</title><rect x="13.4100%" y="405" width="0.1916%" height="15" fill="rgb(250,213,24)" fg:x="70" fg:w="1"/><text x="13.6600%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.19%)</title><rect x="13.4100%" y="389" width="0.1916%" height="15" fill="rgb(247,123,22)" fg:x="70" fg:w="1"/><text x="13.6600%" y="399.50"></text></g><g><title>byte_assembly::main (10 samples, 1.92%)</title><rect x="11.8774%" y="469" width="1.9157%" height="15" fill="rgb(231,138,38)" fg:x="62" fg:w="10"/><text x="12.1274%" y="479.50">b..</text></g><g><title>byte_assembly::execute::execute (10 samples, 1.92%)</title><rect x="11.8774%" y="453" width="1.9157%" height="15" fill="rgb(231,145,46)" fg:x="62" fg:w="10"/><text x="12.1274%" y="463.50">b..</text></g><g><title>byte_assembly::execute::out (10 samples, 1.92%)</title><rect x="11.8774%" y="437" width="1.9157%" height="15" fill="rgb(251,118,11)" fg:x="62" fg:w="10"/><text x="12.1274%" y="447.50">b..</text></g><g><title>core::str::&lt;impl str&gt;::chars (1 samples, 0.19%)</title><rect x="13.6015%" y="421" width="0.1916%" height="15" fill="rgb(217,147,25)" fg:x="71" fg:w="1"/><text x="13.8515%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.19%)</title><rect x="13.6015%" y="405" width="0.1916%" height="15" fill="rgb(247,81,37)" fg:x="71" fg:w="1"/><text x="13.8515%" y="415.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.19%)</title><rect x="13.6015%" y="389" width="0.1916%" height="15" fill="rgb(209,12,38)" fg:x="71" fg:w="1"/><text x="13.8515%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.19%)</title><rect x="13.6015%" y="373" width="0.1916%" height="15" fill="rgb(227,1,9)" fg:x="71" fg:w="1"/><text x="13.8515%" y="383.50"></text></g><g><title>cfree (3 samples, 0.57%)</title><rect x="13.7931%" y="469" width="0.5747%" height="15" fill="rgb(248,47,43)" fg:x="72" fg:w="3"/><text x="14.0431%" y="479.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.19%)</title><rect x="14.3678%" y="469" width="0.1916%" height="15" fill="rgb(221,10,30)" fg:x="75" fg:w="1"/><text x="14.6178%" y="479.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.19%)</title><rect x="14.5594%" y="469" width="0.1916%" height="15" fill="rgb(210,229,1)" fg:x="76" fg:w="1"/><text x="14.8094%" y="479.50"></text></g><g><title>core::fmt::write (2 samples, 0.38%)</title><rect x="14.7510%" y="469" width="0.3831%" height="15" fill="rgb(222,148,37)" fg:x="77" fg:w="2"/><text x="15.0010%" y="479.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.19%)</title><rect x="14.9425%" y="453" width="0.1916%" height="15" fill="rgb(234,67,33)" fg:x="78" fg:w="1"/><text x="15.1925%" y="463.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="15.1341%" y="469" width="0.1916%" height="15" fill="rgb(247,98,35)" fg:x="79" fg:w="1"/><text x="15.3841%" y="479.50"></text></g><g><title>[unknown] (46 samples, 8.81%)</title><rect x="6.7050%" y="485" width="8.8123%" height="15" fill="rgb(247,138,52)" fg:x="35" fg:w="46"/><text x="6.9550%" y="495.50">[unknown]</text></g><g><title>std::io::stdio::stdout (1 samples, 0.19%)</title><rect x="15.3257%" y="469" width="0.1916%" height="15" fill="rgb(213,79,30)" fg:x="80" fg:w="1"/><text x="15.5757%" y="479.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.19%)</title><rect x="23.5632%" y="277" width="0.1916%" height="15" fill="rgb(246,177,23)" fg:x="123" fg:w="1"/><text x="23.8132%" y="287.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 1.15%)</title><rect x="23.3716%" y="341" width="1.1494%" height="15" fill="rgb(230,62,27)" fg:x="122" fg:w="6"/><text x="23.6216%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.96%)</title><rect x="23.5632%" y="325" width="0.9579%" height="15" fill="rgb(216,154,8)" fg:x="123" fg:w="5"/><text x="23.8132%" y="335.50"></text></g><g><title>core::str::validations::next_code_point (5 samples, 0.96%)</title><rect x="23.5632%" y="309" width="0.9579%" height="15" fill="rgb(244,35,45)" fg:x="123" fg:w="5"/><text x="23.8132%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.96%)</title><rect x="23.5632%" y="293" width="0.9579%" height="15" fill="rgb(251,115,12)" fg:x="123" fg:w="5"/><text x="23.8132%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.77%)</title><rect x="23.7548%" y="277" width="0.7663%" height="15" fill="rgb(240,54,50)" fg:x="124" fg:w="4"/><text x="24.0048%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.19%)</title><rect x="24.3295%" y="261" width="0.1916%" height="15" fill="rgb(233,84,52)" fg:x="127" fg:w="1"/><text x="24.5795%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.19%)</title><rect x="24.3295%" y="245" width="0.1916%" height="15" fill="rgb(207,117,47)" fg:x="127" fg:w="1"/><text x="24.5795%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.77%)</title><rect x="24.7126%" y="293" width="0.7663%" height="15" fill="rgb(249,43,39)" fg:x="129" fg:w="4"/><text x="24.9626%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.34%)</title><rect x="24.5211%" y="341" width="1.3410%" height="15" fill="rgb(209,38,44)" fg:x="128" fg:w="7"/><text x="24.7711%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 1.34%)</title><rect x="24.5211%" y="325" width="1.3410%" height="15" fill="rgb(236,212,23)" fg:x="128" fg:w="7"/><text x="24.7711%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.34%)</title><rect x="24.5211%" y="309" width="1.3410%" height="15" fill="rgb(242,79,21)" fg:x="128" fg:w="7"/><text x="24.7711%" y="319.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.38%)</title><rect x="25.4789%" y="293" width="0.3831%" height="15" fill="rgb(211,96,35)" fg:x="133" fg:w="2"/><text x="25.7289%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (2 samples, 0.38%)</title><rect x="26.2452%" y="277" width="0.3831%" height="15" fill="rgb(253,215,40)" fg:x="137" fg:w="2"/><text x="26.4952%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.38%)</title><rect x="26.2452%" y="261" width="0.3831%" height="15" fill="rgb(211,81,21)" fg:x="137" fg:w="2"/><text x="26.4952%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.19%)</title><rect x="26.6284%" y="261" width="0.1916%" height="15" fill="rgb(208,190,38)" fg:x="139" fg:w="1"/><text x="26.8784%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (8 samples, 1.53%)</title><rect x="26.2452%" y="293" width="1.5326%" height="15" fill="rgb(235,213,38)" fg:x="137" fg:w="8"/><text x="26.4952%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (6 samples, 1.15%)</title><rect x="26.6284%" y="277" width="1.1494%" height="15" fill="rgb(237,122,38)" fg:x="139" fg:w="6"/><text x="26.8784%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.96%)</title><rect x="26.8199%" y="261" width="0.9579%" height="15" fill="rgb(244,218,35)" fg:x="140" fg:w="5"/><text x="27.0699%" y="271.50"></text></g><g><title>[libc.so.6] (5 samples, 0.96%)</title><rect x="26.8199%" y="245" width="0.9579%" height="15" fill="rgb(240,68,47)" fg:x="140" fg:w="5"/><text x="27.0699%" y="255.50"></text></g><g><title>core::cmp::min (1 samples, 0.19%)</title><rect x="28.9272%" y="229" width="0.1916%" height="15" fill="rgb(210,16,53)" fg:x="151" fg:w="1"/><text x="29.1772%" y="239.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.19%)</title><rect x="28.9272%" y="213" width="0.1916%" height="15" fill="rgb(235,124,12)" fg:x="151" fg:w="1"/><text x="29.1772%" y="223.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.19%)</title><rect x="28.9272%" y="197" width="0.1916%" height="15" fill="rgb(224,169,11)" fg:x="151" fg:w="1"/><text x="29.1772%" y="207.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (58 samples, 11.11%)</title><rect x="28.9272%" y="261" width="11.1111%" height="15" fill="rgb(250,166,2)" fg:x="151" fg:w="58"/><text x="29.1772%" y="271.50">&lt;std::sys::unix:..</text></g><g><title>std::sys::unix::fd::FileDesc::write (58 samples, 11.11%)</title><rect x="28.9272%" y="245" width="11.1111%" height="15" fill="rgb(242,216,29)" fg:x="151" fg:w="58"/><text x="29.1772%" y="255.50">std::sys::unix::..</text></g><g><title>write (57 samples, 10.92%)</title><rect x="29.1188%" y="229" width="10.9195%" height="15" fill="rgb(230,116,27)" fg:x="152" fg:w="57"/><text x="29.3688%" y="239.50">write</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (68 samples, 13.03%)</title><rect x="27.7778%" y="293" width="13.0268%" height="15" fill="rgb(228,99,48)" fg:x="145" fg:w="68"/><text x="28.0278%" y="303.50">&lt;std::io::stdio::Std..</text></g><g><title>std::io::Write::write_all (68 samples, 13.03%)</title><rect x="27.7778%" y="277" width="13.0268%" height="15" fill="rgb(253,11,6)" fg:x="145" fg:w="68"/><text x="28.0278%" y="287.50">std::io::Write::writ..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.77%)</title><rect x="40.0383%" y="261" width="0.7663%" height="15" fill="rgb(247,143,39)" fg:x="209" fg:w="4"/><text x="40.2883%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.77%)</title><rect x="40.0383%" y="245" width="0.7663%" height="15" fill="rgb(236,97,10)" fg:x="209" fg:w="4"/><text x="40.2883%" y="255.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (110 samples, 21.07%)</title><rect x="25.8621%" y="325" width="21.0728%" height="15" fill="rgb(233,208,19)" fg:x="135" fg:w="110"/><text x="26.1121%" y="335.50">&lt;std::io::buffered::linewriter::L..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (110 samples, 21.07%)</title><rect x="25.8621%" y="309" width="21.0728%" height="15" fill="rgb(216,164,2)" fg:x="135" fg:w="110"/><text x="26.1121%" y="319.50">&lt;std::io::buffered::linewritershi..</text></g><g><title>std::sys_common::memchr::memrchr (32 samples, 6.13%)</title><rect x="40.8046%" y="293" width="6.1303%" height="15" fill="rgb(220,129,5)" fg:x="213" fg:w="32"/><text x="41.0546%" y="303.50">std::sys..</text></g><g><title>std::sys::unix::memchr::memrchr (32 samples, 6.13%)</title><rect x="40.8046%" y="277" width="6.1303%" height="15" fill="rgb(242,17,10)" fg:x="213" fg:w="32"/><text x="41.0546%" y="287.50">std::sys..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (32 samples, 6.13%)</title><rect x="40.8046%" y="261" width="6.1303%" height="15" fill="rgb(242,107,0)" fg:x="213" fg:w="32"/><text x="41.0546%" y="271.50">std::sys..</text></g><g><title>[libc.so.6] (32 samples, 6.13%)</title><rect x="40.8046%" y="245" width="6.1303%" height="15" fill="rgb(251,28,31)" fg:x="213" fg:w="32"/><text x="41.0546%" y="255.50">[libc.so..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.19%)</title><rect x="46.9349%" y="325" width="0.1916%" height="15" fill="rgb(233,223,10)" fg:x="245" fg:w="1"/><text x="47.1849%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.19%)</title><rect x="46.9349%" y="309" width="0.1916%" height="15" fill="rgb(215,21,27)" fg:x="245" fg:w="1"/><text x="47.1849%" y="319.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.19%)</title><rect x="46.9349%" y="293" width="0.1916%" height="15" fill="rgb(232,23,21)" fg:x="245" fg:w="1"/><text x="47.1849%" y="303.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (113 samples, 21.65%)</title><rect x="25.8621%" y="341" width="21.6475%" height="15" fill="rgb(244,5,23)" fg:x="135" fg:w="113"/><text x="26.1121%" y="351.50">&lt;std::io::stdio::StdoutLock as std..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (2 samples, 0.38%)</title><rect x="47.1264%" y="325" width="0.3831%" height="15" fill="rgb(226,81,46)" fg:x="246" fg:w="2"/><text x="47.3764%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.38%)</title><rect x="47.1264%" y="309" width="0.3831%" height="15" fill="rgb(247,70,30)" fg:x="246" fg:w="2"/><text x="47.3764%" y="319.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.38%)</title><rect x="47.1264%" y="293" width="0.3831%" height="15" fill="rgb(212,68,19)" fg:x="246" fg:w="2"/><text x="47.3764%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.38%)</title><rect x="47.1264%" y="277" width="0.3831%" height="15" fill="rgb(240,187,13)" fg:x="246" fg:w="2"/><text x="47.3764%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.38%)</title><rect x="47.1264%" y="261" width="0.3831%" height="15" fill="rgb(223,113,26)" fg:x="246" fg:w="2"/><text x="47.3764%" y="271.50"></text></g><g><title>core::mem::replace (2 samples, 0.38%)</title><rect x="47.1264%" y="245" width="0.3831%" height="15" fill="rgb(206,192,2)" fg:x="246" fg:w="2"/><text x="47.3764%" y="255.50"></text></g><g><title>core::ptr::write (2 samples, 0.38%)</title><rect x="47.1264%" y="229" width="0.3831%" height="15" fill="rgb(241,108,4)" fg:x="246" fg:w="2"/><text x="47.3764%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.19%)</title><rect x="47.5096%" y="341" width="0.1916%" height="15" fill="rgb(247,173,49)" fg:x="248" fg:w="1"/><text x="47.7596%" y="351.50"></text></g><g><title>alloc::string::String::clear (1 samples, 0.19%)</title><rect x="47.7011%" y="341" width="0.1916%" height="15" fill="rgb(224,114,35)" fg:x="249" fg:w="1"/><text x="47.9511%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (1 samples, 0.19%)</title><rect x="47.7011%" y="325" width="0.1916%" height="15" fill="rgb(245,159,27)" fg:x="249" fg:w="1"/><text x="47.9511%" y="335.50"></text></g><g><title>alloc::string::String::new (1 samples, 0.19%)</title><rect x="47.8927%" y="341" width="0.1916%" height="15" fill="rgb(245,172,44)" fg:x="250" fg:w="1"/><text x="48.1427%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.38%)</title><rect x="49.6169%" y="277" width="0.3831%" height="15" fill="rgb(236,23,11)" fg:x="259" fg:w="2"/><text x="49.8669%" y="287.50"></text></g><g><title>__rust_alloc (4 samples, 0.77%)</title><rect x="50.7663%" y="229" width="0.7663%" height="15" fill="rgb(205,117,38)" fg:x="265" fg:w="4"/><text x="51.0163%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 4.60%)</title><rect x="50.0000%" y="277" width="4.5977%" height="15" fill="rgb(237,72,25)" fg:x="261" fg:w="24"/><text x="50.2500%" y="287.50">alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 4.21%)</title><rect x="50.3831%" y="261" width="4.2146%" height="15" fill="rgb(244,70,9)" fg:x="263" fg:w="22"/><text x="50.6331%" y="271.50">alloc..</text></g><g><title>alloc::alloc::alloc (20 samples, 3.83%)</title><rect x="50.7663%" y="245" width="3.8314%" height="15" fill="rgb(217,125,39)" fg:x="265" fg:w="20"/><text x="51.0163%" y="255.50">allo..</text></g><g><title>malloc (16 samples, 3.07%)</title><rect x="51.5326%" y="229" width="3.0651%" height="15" fill="rgb(235,36,10)" fg:x="269" fg:w="16"/><text x="51.7826%" y="239.50">mal..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (34 samples, 6.51%)</title><rect x="48.4674%" y="309" width="6.5134%" height="15" fill="rgb(251,123,47)" fg:x="253" fg:w="34"/><text x="48.7174%" y="319.50">alloc::ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (32 samples, 6.13%)</title><rect x="48.8506%" y="293" width="6.1303%" height="15" fill="rgb(221,13,13)" fg:x="255" fg:w="32"/><text x="49.1006%" y="303.50">alloc::r..</text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.38%)</title><rect x="54.5977%" y="277" width="0.3831%" height="15" fill="rgb(238,131,9)" fg:x="285" fg:w="2"/><text x="54.8477%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.38%)</title><rect x="54.5977%" y="261" width="0.3831%" height="15" fill="rgb(211,50,8)" fg:x="285" fg:w="2"/><text x="54.8477%" y="271.50"></text></g><g><title>alloc::raw_vec::handle_reserve (2 samples, 0.38%)</title><rect x="54.9808%" y="309" width="0.3831%" height="15" fill="rgb(245,182,24)" fg:x="287" fg:w="2"/><text x="55.2308%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (45 samples, 8.62%)</title><rect x="48.0843%" y="325" width="8.6207%" height="15" fill="rgb(242,14,37)" fg:x="251" fg:w="45"/><text x="48.3343%" y="335.50">alloc::vec::..</text></g><g><title>core::ptr::write (7 samples, 1.34%)</title><rect x="55.3640%" y="309" width="1.3410%" height="15" fill="rgb(246,228,12)" fg:x="289" fg:w="7"/><text x="55.6140%" y="319.50"></text></g><g><title>alloc::string::String::push (46 samples, 8.81%)</title><rect x="48.0843%" y="341" width="8.8123%" height="15" fill="rgb(213,55,15)" fg:x="251" fg:w="46"/><text x="48.3343%" y="351.50">alloc::strin..</text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.19%)</title><rect x="56.7050%" y="325" width="0.1916%" height="15" fill="rgb(209,9,3)" fg:x="296" fg:w="1"/><text x="56.9550%" y="335.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.19%)</title><rect x="56.7050%" y="309" width="0.1916%" height="15" fill="rgb(230,59,30)" fg:x="296" fg:w="1"/><text x="56.9550%" y="319.50"></text></g><g><title>core::fmt::Arguments::new_v1 (8 samples, 1.53%)</title><rect x="56.8966%" y="341" width="1.5326%" height="15" fill="rgb(209,121,21)" fg:x="297" fg:w="8"/><text x="57.1466%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.19%)</title><rect x="58.4291%" y="341" width="0.1916%" height="15" fill="rgb(220,109,13)" fg:x="305" fg:w="1"/><text x="58.6791%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1 samples, 0.19%)</title><rect x="58.4291%" y="325" width="0.1916%" height="15" fill="rgb(232,18,1)" fg:x="305" fg:w="1"/><text x="58.6791%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="59.7701%" y="325" width="0.1916%" height="15" fill="rgb(215,41,42)" fg:x="312" fg:w="1"/><text x="60.0201%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="59.7701%" y="309" width="0.1916%" height="15" fill="rgb(224,123,36)" fg:x="312" fg:w="1"/><text x="60.0201%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.19%)</title><rect x="59.7701%" y="293" width="0.1916%" height="15" fill="rgb(240,125,3)" fg:x="312" fg:w="1"/><text x="60.0201%" y="303.50"></text></g><g><title>core::fmt::Formatter::new (5 samples, 0.96%)</title><rect x="59.9617%" y="325" width="0.9579%" height="15" fill="rgb(205,98,50)" fg:x="313" fg:w="5"/><text x="60.2117%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="62.4521%" y="277" width="0.1916%" height="15" fill="rgb(205,185,37)" fg:x="326" fg:w="1"/><text x="62.7021%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="62.4521%" y="261" width="0.1916%" height="15" fill="rgb(238,207,15)" fg:x="326" fg:w="1"/><text x="62.7021%" y="271.50"></text></g><g><title>core::fmt::Formatter::new (9 samples, 1.72%)</title><rect x="62.6437%" y="277" width="1.7241%" height="15" fill="rgb(213,199,42)" fg:x="327" fg:w="9"/><text x="62.8937%" y="287.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3 samples, 0.57%)</title><rect x="64.3678%" y="261" width="0.5747%" height="15" fill="rgb(235,201,11)" fg:x="336" fg:w="3"/><text x="64.6178%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.19%)</title><rect x="68.7739%" y="213" width="0.1916%" height="15" fill="rgb(207,46,11)" fg:x="359" fg:w="1"/><text x="69.0239%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (2 samples, 0.38%)</title><rect x="68.7739%" y="229" width="0.3831%" height="15" fill="rgb(241,35,35)" fg:x="359" fg:w="2"/><text x="69.0239%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.19%)</title><rect x="68.9655%" y="213" width="0.1916%" height="15" fill="rgb(243,32,47)" fg:x="360" fg:w="1"/><text x="69.2155%" y="223.50"></text></g><g><title>alloc::raw_vec::handle_reserve (3 samples, 0.57%)</title><rect x="69.1571%" y="149" width="0.5747%" height="15" fill="rgb(247,202,23)" fg:x="361" fg:w="3"/><text x="69.4071%" y="159.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.19%)</title><rect x="70.6897%" y="85" width="0.1916%" height="15" fill="rgb(219,102,11)" fg:x="369" fg:w="1"/><text x="70.9397%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.19%)</title><rect x="70.8812%" y="85" width="0.1916%" height="15" fill="rgb(243,110,44)" fg:x="370" fg:w="1"/><text x="71.1312%" y="95.50"></text></g><g><title>__rust_alloc (2 samples, 0.38%)</title><rect x="71.4559%" y="37" width="0.3831%" height="15" fill="rgb(222,74,54)" fg:x="373" fg:w="2"/><text x="71.7059%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 3.45%)</title><rect x="71.0728%" y="85" width="3.4483%" height="15" fill="rgb(216,99,12)" fg:x="371" fg:w="18"/><text x="71.3228%" y="95.50">all..</text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 3.07%)</title><rect x="71.4559%" y="69" width="3.0651%" height="15" fill="rgb(226,22,26)" fg:x="373" fg:w="16"/><text x="71.7059%" y="79.50">all..</text></g><g><title>alloc::alloc::alloc (16 samples, 3.07%)</title><rect x="71.4559%" y="53" width="3.0651%" height="15" fill="rgb(217,163,10)" fg:x="373" fg:w="16"/><text x="71.7059%" y="63.50">all..</text></g><g><title>malloc (14 samples, 2.68%)</title><rect x="71.8391%" y="37" width="2.6820%" height="15" fill="rgb(213,25,53)" fg:x="375" fg:w="14"/><text x="72.0891%" y="47.50">ma..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.19%)</title><rect x="74.5211%" y="85" width="0.1916%" height="15" fill="rgb(252,105,26)" fg:x="389" fg:w="1"/><text x="74.7711%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.19%)</title><rect x="74.5211%" y="69" width="0.1916%" height="15" fill="rgb(220,39,43)" fg:x="389" fg:w="1"/><text x="74.7711%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (28 samples, 5.36%)</title><rect x="69.7318%" y="149" width="5.3640%" height="15" fill="rgb(229,68,48)" fg:x="364" fg:w="28"/><text x="69.9818%" y="159.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 5.17%)</title><rect x="69.9234%" y="133" width="5.1724%" height="15" fill="rgb(252,8,32)" fg:x="365" fg:w="27"/><text x="70.1734%" y="143.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 5.17%)</title><rect x="69.9234%" y="117" width="5.1724%" height="15" fill="rgb(223,20,43)" fg:x="365" fg:w="27"/><text x="70.1734%" y="127.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (25 samples, 4.79%)</title><rect x="70.3065%" y="101" width="4.7893%" height="15" fill="rgb(229,81,49)" fg:x="367" fg:w="25"/><text x="70.5565%" y="111.50">alloc:..</text></g><g><title>core::cmp::max (2 samples, 0.38%)</title><rect x="74.7126%" y="85" width="0.3831%" height="15" fill="rgb(236,28,36)" fg:x="390" fg:w="2"/><text x="74.9626%" y="95.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.38%)</title><rect x="74.7126%" y="69" width="0.3831%" height="15" fill="rgb(249,185,26)" fg:x="390" fg:w="2"/><text x="74.9626%" y="79.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.38%)</title><rect x="74.7126%" y="53" width="0.3831%" height="15" fill="rgb(249,174,33)" fg:x="390" fg:w="2"/><text x="74.9626%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (35 samples, 6.70%)</title><rect x="69.1571%" y="229" width="6.7050%" height="15" fill="rgb(233,201,37)" fg:x="361" fg:w="35"/><text x="69.4071%" y="239.50">&lt;alloc::s..</text></g><g><title>alloc::string::String::push_str (35 samples, 6.70%)</title><rect x="69.1571%" y="213" width="6.7050%" height="15" fill="rgb(221,78,26)" fg:x="361" fg:w="35"/><text x="69.4071%" y="223.50">alloc::st..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (35 samples, 6.70%)</title><rect x="69.1571%" y="197" width="6.7050%" height="15" fill="rgb(250,127,30)" fg:x="361" fg:w="35"/><text x="69.4071%" y="207.50">alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (35 samples, 6.70%)</title><rect x="69.1571%" y="181" width="6.7050%" height="15" fill="rgb(230,49,44)" fg:x="361" fg:w="35"/><text x="69.4071%" y="191.50">&lt;alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (35 samples, 6.70%)</title><rect x="69.1571%" y="165" width="6.7050%" height="15" fill="rgb(229,67,23)" fg:x="361" fg:w="35"/><text x="69.4071%" y="175.50">alloc::ve..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.77%)</title><rect x="75.0958%" y="149" width="0.7663%" height="15" fill="rgb(249,83,47)" fg:x="392" fg:w="4"/><text x="75.3458%" y="159.50"></text></g><g><title>[libc.so.6] (4 samples, 0.77%)</title><rect x="75.0958%" y="133" width="0.7663%" height="15" fill="rgb(215,43,3)" fg:x="392" fg:w="4"/><text x="75.3458%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (3 samples, 0.57%)</title><rect x="77.3946%" y="213" width="0.5747%" height="15" fill="rgb(238,154,13)" fg:x="404" fg:w="3"/><text x="77.6446%" y="223.50"></text></g><g><title>core::fmt::Formatter::pad_integral (12 samples, 2.30%)</title><rect x="75.8621%" y="229" width="2.2989%" height="15" fill="rgb(219,56,2)" fg:x="396" fg:w="12"/><text x="76.1121%" y="239.50">c..</text></g><g><title>core::fmt::Formatter::sign_plus (1 samples, 0.19%)</title><rect x="77.9693%" y="213" width="0.1916%" height="15" fill="rgb(233,0,4)" fg:x="407" fg:w="1"/><text x="78.2193%" y="223.50"></text></g><g><title>core::fmt::write (113 samples, 21.65%)</title><rect x="58.6207%" y="341" width="21.6475%" height="15" fill="rgb(235,30,7)" fg:x="306" fg:w="113"/><text x="58.8707%" y="351.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (101 samples, 19.35%)</title><rect x="60.9195%" y="325" width="19.3487%" height="15" fill="rgb(250,79,13)" fg:x="318" fg:w="101"/><text x="61.1695%" y="335.50">core::fmt::rt::Argument::fmt</text></g><g><title>&lt;byte_assembly::value::Value as core::fmt::Display&gt;::fmt (101 samples, 19.35%)</title><rect x="60.9195%" y="309" width="19.3487%" height="15" fill="rgb(211,146,34)" fg:x="318" fg:w="101"/><text x="61.1695%" y="319.50">&lt;byte_assembly::value::Value a..</text></g><g><title>core::fmt::write (96 samples, 18.39%)</title><rect x="61.8774%" y="293" width="18.3908%" height="15" fill="rgb(228,22,38)" fg:x="323" fg:w="96"/><text x="62.1274%" y="303.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (83 samples, 15.90%)</title><rect x="64.3678%" y="277" width="15.9004%" height="15" fill="rgb(235,168,5)" fg:x="336" fg:w="83"/><text x="64.6178%" y="287.50">core::fmt::rt::Argument:..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (80 samples, 15.33%)</title><rect x="64.9425%" y="261" width="15.3257%" height="15" fill="rgb(221,155,16)" fg:x="339" fg:w="80"/><text x="65.1925%" y="271.50">core::fmt::num::imp::&lt;i..</text></g><g><title>core::fmt::num::imp::fmt_u64 (78 samples, 14.94%)</title><rect x="65.3257%" y="245" width="14.9425%" height="15" fill="rgb(215,215,53)" fg:x="341" fg:w="78"/><text x="65.5757%" y="255.50">core::fmt::num::imp::fm..</text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 2.11%)</title><rect x="78.1609%" y="229" width="2.1073%" height="15" fill="rgb(223,4,10)" fg:x="408" fg:w="11"/><text x="78.4109%" y="239.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (27 samples, 5.17%)</title><rect x="80.2682%" y="341" width="5.1724%" height="15" fill="rgb(234,103,6)" fg:x="419" fg:w="27"/><text x="80.5182%" y="351.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (27 samples, 5.17%)</title><rect x="80.2682%" y="325" width="5.1724%" height="15" fill="rgb(227,97,0)" fg:x="419" fg:w="27"/><text x="80.5182%" y="335.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (27 samples, 5.17%)</title><rect x="80.2682%" y="309" width="5.1724%" height="15" fill="rgb(234,150,53)" fg:x="419" fg:w="27"/><text x="80.5182%" y="319.50">core::..</text></g><g><title>cfree (24 samples, 4.60%)</title><rect x="80.8429%" y="293" width="4.5977%" height="15" fill="rgb(228,201,54)" fg:x="422" fg:w="24"/><text x="81.0929%" y="303.50">cfree</text></g><g><title>[libc.so.6] (15 samples, 2.87%)</title><rect x="82.5670%" y="277" width="2.8736%" height="15" fill="rgb(222,22,37)" fg:x="431" fg:w="15"/><text x="82.8170%" y="287.50">[l..</text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (33 samples, 6.32%)</title><rect x="85.4406%" y="341" width="6.3218%" height="15" fill="rgb(237,53,32)" fg:x="446" fg:w="33"/><text x="85.6906%" y="351.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (33 samples, 6.32%)</title><rect x="85.4406%" y="325" width="6.3218%" height="15" fill="rgb(233,25,53)" fg:x="446" fg:w="33"/><text x="85.6906%" y="335.50">core::pt..</text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 6.32%)</title><rect x="85.4406%" y="309" width="6.3218%" height="15" fill="rgb(210,40,34)" fg:x="446" fg:w="33"/><text x="85.6906%" y="319.50">&lt;std::sy..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (28 samples, 5.36%)</title><rect x="86.3985%" y="293" width="5.3640%" height="15" fill="rgb(241,220,44)" fg:x="451" fg:w="28"/><text x="86.6485%" y="303.50">std::sy..</text></g><g><title>core::sync::atomic::AtomicU32::swap (28 samples, 5.36%)</title><rect x="86.3985%" y="277" width="5.3640%" height="15" fill="rgb(235,28,35)" fg:x="451" fg:w="28"/><text x="86.6485%" y="287.50">core::s..</text></g><g><title>core::sync::atomic::atomic_swap (28 samples, 5.36%)</title><rect x="86.3985%" y="261" width="5.3640%" height="15" fill="rgb(210,56,17)" fg:x="451" fg:w="28"/><text x="86.6485%" y="271.50">core::s..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.19%)</title><rect x="91.7625%" y="341" width="0.1916%" height="15" fill="rgb(224,130,29)" fg:x="479" fg:w="1"/><text x="92.0125%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (3 samples, 0.57%)</title><rect x="91.9540%" y="341" width="0.5747%" height="15" fill="rgb(235,212,8)" fg:x="480" fg:w="3"/><text x="92.2040%" y="351.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u8&gt;::from_str (3 samples, 0.57%)</title><rect x="91.9540%" y="325" width="0.5747%" height="15" fill="rgb(223,33,50)" fg:x="480" fg:w="3"/><text x="92.2040%" y="335.50"></text></g><g><title>core::num::from_str_radix (3 samples, 0.57%)</title><rect x="91.9540%" y="309" width="0.5747%" height="15" fill="rgb(219,149,13)" fg:x="480" fg:w="3"/><text x="92.2040%" y="319.50"></text></g><g><title>&lt;u8 as core::ops::arith::Mul&gt;::mul (1 samples, 0.19%)</title><rect x="92.3372%" y="293" width="0.1916%" height="15" fill="rgb(250,156,29)" fg:x="482" fg:w="1"/><text x="92.5872%" y="303.50"></text></g><g><title>byte_assembly::execute::out (398 samples, 76.25%)</title><rect x="20.4981%" y="357" width="76.2452%" height="15" fill="rgb(216,193,19)" fg:x="107" fg:w="398"/><text x="20.7481%" y="367.50">byte_assembly::execute::out</text></g><g><title>std::io::stdio::Stdout::lock (22 samples, 4.21%)</title><rect x="92.5287%" y="341" width="4.2146%" height="15" fill="rgb(216,135,14)" fg:x="483" fg:w="22"/><text x="92.7787%" y="351.50">std::..</text></g><g><title>std::sync::remutex::ReentrantMutex&lt;T&gt;::lock (1 samples, 0.19%)</title><rect x="96.5517%" y="325" width="0.1916%" height="15" fill="rgb(241,47,5)" fg:x="504" fg:w="1"/><text x="96.8017%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (1 samples, 0.19%)</title><rect x="96.5517%" y="309" width="0.1916%" height="15" fill="rgb(233,42,35)" fg:x="504" fg:w="1"/><text x="96.8017%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.19%)</title><rect x="96.5517%" y="293" width="0.1916%" height="15" fill="rgb(231,13,6)" fg:x="504" fg:w="1"/><text x="96.8017%" y="303.50"></text></g><g><title>_start (435 samples, 83.33%)</title><rect x="15.5172%" y="485" width="83.3333%" height="15" fill="rgb(207,181,40)" fg:x="81" fg:w="435"/><text x="15.7672%" y="495.50">_start</text></g><g><title>__libc_start_main (435 samples, 83.33%)</title><rect x="15.5172%" y="469" width="83.3333%" height="15" fill="rgb(254,173,49)" fg:x="81" fg:w="435"/><text x="15.7672%" y="479.50">__libc_start_main</text></g><g><title>[libc.so.6] (435 samples, 83.33%)</title><rect x="15.5172%" y="453" width="83.3333%" height="15" fill="rgb(221,1,38)" fg:x="81" fg:w="435"/><text x="15.7672%" y="463.50">[libc.so.6]</text></g><g><title>main (435 samples, 83.33%)</title><rect x="15.5172%" y="437" width="83.3333%" height="15" fill="rgb(206,124,46)" fg:x="81" fg:w="435"/><text x="15.7672%" y="447.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (435 samples, 83.33%)</title><rect x="15.5172%" y="421" width="83.3333%" height="15" fill="rgb(249,21,11)" fg:x="81" fg:w="435"/><text x="15.7672%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (435 samples, 83.33%)</title><rect x="15.5172%" y="405" width="83.3333%" height="15" fill="rgb(222,201,40)" fg:x="81" fg:w="435"/><text x="15.7672%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>byte_assembly::main (435 samples, 83.33%)</title><rect x="15.5172%" y="389" width="83.3333%" height="15" fill="rgb(235,61,29)" fg:x="81" fg:w="435"/><text x="15.7672%" y="399.50">byte_assembly::main</text></g><g><title>byte_assembly::execute::execute (435 samples, 83.33%)</title><rect x="15.5172%" y="373" width="83.3333%" height="15" fill="rgb(219,207,3)" fg:x="81" fg:w="435"/><text x="15.7672%" y="383.50">byte_assembly::execute::execute</text></g><g><title>byte_assembly::value::Value::perform_operation (11 samples, 2.11%)</title><rect x="96.7433%" y="357" width="2.1073%" height="15" fill="rgb(222,56,46)" fg:x="505" fg:w="11"/><text x="96.9933%" y="367.50">b..</text></g><g><title>byte_assembly::value::Value::take (2 samples, 0.38%)</title><rect x="98.4674%" y="341" width="0.3831%" height="15" fill="rgb(239,76,54)" fg:x="514" fg:w="2"/><text x="98.7174%" y="351.50"></text></g><g><title>cfree (1 samples, 0.19%)</title><rect x="98.8506%" y="485" width="0.1916%" height="15" fill="rgb(231,124,27)" fg:x="516" fg:w="1"/><text x="99.1006%" y="495.50"></text></g><g><title>all (522 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(249,195,6)" fg:x="0" fg:w="522"/><text x="0.2500%" y="527.50"></text></g><g><title>byte_assembly (522 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="522"/><text x="0.2500%" y="511.50">byte_assembly</text></g><g><title>std::rt::cleanup::CLEANUP (5 samples, 0.96%)</title><rect x="99.0421%" y="485" width="0.9579%" height="15" fill="rgb(206,201,31)" fg:x="517" fg:w="5"/><text x="99.2921%" y="495.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (5 samples, 0.96%)</title><rect x="99.0421%" y="469" width="0.9579%" height="15" fill="rgb(231,57,52)" fg:x="517" fg:w="5"/><text x="99.2921%" y="479.50"></text></g></svg></svg>